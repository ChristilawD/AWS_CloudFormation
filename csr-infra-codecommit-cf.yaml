AWSTemplateFormatVersion: 2010-09-09 
 
Description: >- 
  This template creates networking infrastructure for the Windows Web Server (IIS) environment, and creates Parameter Store entries. 
  v0.1
 
Metadata: 
  'AWS::CloudFormation::Interface': 
    ParameterGroups: 
    - 
      Label: 
        default: General Configuration 
      Parameters: 
        - Environment 
    ParameterLabels: 
      Environment: 
        default: Environment Label 
 
Parameters: 
  Environment: 
    Description: Used for creating name tags. 
    Type: String 
  CertNames: 
    Description: A comma seperated list of host names to include on the certificate. 
    Type: CommaDelimitedList 
  CertMultiple: 
    AllowedValues: 
      - "Yes" 
      - "No" 
    Default: "No" 
    Description: Select Yes if there is more than one host name used. 
    Type: String 
 
Conditions: 
  CreateSAN: !Equals [!Ref CertMultiple, "Yes"] 
 
Resources: 
# Security Groups 
  sgrWSLB: 
    Type: AWS::EC2::SecurityGroup 
    Properties:  
      GroupDescription: !Sub "${Environment} Windows Web Load Balancers Security Group" 
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0" 
          FromPort: 80 
          IpProtocol: tcp 
          ToPort: 80 
          Description: Used to allow HTTP redirect 
        - 
          Description: !Sub "${Environment} Web Front-end Servers Group" 
          FromPort: 443 
          IpProtocol: tcp 
          SourceSecurityGroupId: !Join ['',['{{resolve:ssm:',!Ref Environment,'-sgrFrontendWeb:1}}']] 
          ToPort: 443 
      Tags: 
        - 
          Key: "Name" 
          Value: !Sub "${Environment}-wslb-sgr" 
        - 
          Key: "Environment" 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  sgrCS: 
    Type: AWS::EC2::SecurityGroup 
    Properties:  
      GroupDescription: !Sub "${Environment} Windows Web Servers Security Group" 
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref sgrWSLB 
          FromPort: 443 
          IpProtocol: tcp 
          ToPort: 443 
          Description: Windows Web Load Balancers Security Group 
        - 
          SourceSecurityGroupId: !Ref sgrWSLB 
          FromPort: 5001 
          IpProtocol: tcp 
          ToPort: 5001 
          Description: Windows Web Load Balancers Security Group 
      Tags: 
        - 
          Key: "Name" 
          Value: !Sub "${Environment}-ws-sgr" 
        - 
          Key: "Environment" 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  sgrSolrLB: 
    Type: AWS::EC2::SecurityGroup 
    Properties:  
      GroupDescription: !Sub "${Environment} Solr Load Balancer Security Group" 
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Join ['',['{{resolve:ssm:',!Ref Environment,'-sgrFrontendWeb:1}}']] 
          FromPort: 8983 
          IpProtocol: tcp 
          ToPort: 8983 
          Description: !Sub "${Environment} Web Front-end Servers Group" 
      Tags: 
        - 
          Key: "Name" 
          Value: !Sub "${Environment}-solrlb-sgr" 
        - 
          Key: "Environment" 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  sgrSolr: 
    Type: AWS::EC2::SecurityGroup 
    Properties:  
      GroupDescription: !Sub "${Environment} Solr Security Group" 
      SecurityGroupIngress: 
        - 
          SourceSecurityGroupId: !Ref sgrSolrLB 
          FromPort: 8983 
          IpProtocol: tcp 
          ToPort: 8983 
          Description: !Sub "${Environment} Solr Load Balancer Security Group" 
      Tags: 
        - 
          Key: "Name" 
          Value: !Sub "${Environment}-solr-sgr" 
        - 
          Key: "Environment" 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
 
# Elastic Load Balancer 
  WSTG: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties: 
      Matcher: 
        HttpCode: "200" 
      HealthCheckIntervalSeconds: 60 
      HealthCheckTimeoutSeconds: 10 
      HealthyThresholdCount: 2 
      UnhealthyThresholdCount: 2 
      Port: 443 
      Protocol: HTTPS 
      Tags: 
        - 
          Key: Name 
          Value: !Sub "${Environment}-ws-tg" 
        - 
          Key: Environment 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  WSITG: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties: 
      Matcher: 
        HttpCode: "200" 
      HealthCheckIntervalSeconds: 60 
      HealthCheckTimeoutSeconds: 10 
      HealthyThresholdCount: 2 
      UnhealthyThresholdCount: 2 
      Port: 5001 
      Protocol: HTTPS 
      Tags: 
        - 
          Key: Name 
          Value: !Sub "${Environment}-wsi-tg" 
        - 
          Key: Environment 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  SolrTG: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties: 
      Matcher: 
        HttpCode: "200" 
      HealthCheckIntervalSeconds: 60 
      HealthCheckTimeoutSeconds: 10 
      HealthyThresholdCount: 2 
      UnhealthyThresholdCount: 2 
      Port: 8983 
      Protocol: HTTPS 
      Tags: 
        - 
          Key: Name 
          Value: !Sub "${Environment}-solr-tg" 
        - 
          Key: Environment 
          Value: !Ref Environment 
      VpcId: '{{resolve:ssm:VPC:1}}' 
  WSLB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    Properties: 
      LoadBalancerAttributes: 
        - 
          Key: access_logs.s3.enabled 
          Value: "true" 
        - 
          Key: access_logs.s3.bucket 
          Value: !Join 
            - '' 
            - - 'ddwa-' 
              - '{{resolve:ssm:AccountShortName:1}}' 
              - '-logs' 
      SecurityGroups: 
        - !Ref sgrWSLB 
      Subnets: 
        - '{{resolve:ssm:publicsubnet1:1}}' 
        - '{{resolve:ssm:publicsubnet2:1}}' 
        - '{{resolve:ssm:publicsubnet3:1}}' 
      Tags: 
        - 
          Key: Name 
          Value: !Sub "${Environment}-ws-lb" 
        - 
          Key: Environment 
          Value: !Ref Environment 
      Type: application 
  SolrLB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
    Properties: 
      LoadBalancerAttributes: 
        - 
          Key: access_logs.s3.enabled 
          Value: "true" 
        - 
          Key: access_logs.s3.bucket 
          Value: !Join 
            - '' 
            - - 'ddwa-' 
              - '{{resolve:ssm:AccountShortName:1}}' 
              - '-logs' 
      Scheme: internal 
      SecurityGroups: 
        - !Ref sgrSolrLB 
      Subnets: 
        - '{{resolve:ssm:publicsubnet1:1}}' 
        - '{{resolve:ssm:publicsubnet2:1}}' 
        - '{{resolve:ssm:publicsubnet3:1}}' 
      Tags: 
        - 
          Key: Name 
          Value: !Sub "${Environment}-solr-lb" 
        - 
          Key: Environment 
          Value: !Ref Environment 
      Type: application 
  CSListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      Certificates: 
        - CertificateArn: !Ref LBCertificate 
      DefaultActions: 
        - TargetGroupArn: !Ref WSTG 
          Type: forward 
      LoadBalancerArn: !Ref WSLB 
      Port: 443 
      Protocol: HTTPS 
  CSListener80: 
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      DefaultActions: 
        - 
          RedirectConfig: 
            Port: '443' 
            Protocol: HTTPS 
            StatusCode: HTTP_301 
          Type: redirect 
      LoadBalancerArn: !Ref WSLB 
      Port: 80 
      Protocol: HTTP 
  CSListenerRule: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule 
    Properties: 
      Actions: 
        - 
          TargetGroupArn: !Ref WSITG 
          Type: forward 
      Conditions: 
        - 
          Field: path-pattern 
          Values: 
            - '/csr' 
            - '/csr/*' 
      ListenerArn: !Ref CSListener 
      Priority: 1 
  SolrListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener 
    Properties: 
      Certificates: 
        - CertificateArn: !Ref LBCertificate 
      DefaultActions: 
        - 
          Type: fixed-response 
          FixedResponseConfig: 
            ContentType: "text/css" 
            StatusCode: "404" 
      LoadBalancerArn: !Ref SolrLB 
      Port: 8983 
      Protocol: HTTPS 
  SolrListenerRule: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule 
    Properties: 
      Actions: 
        - 
          TargetGroupArn: !Ref SolrTG 
          Type: forward 
      Conditions: 
        - 
          Field: host-header 
          Values: 
            - 'sc.privatealb.com' 
        - 
          Field: path-pattern 
          Values: 
            - '/solr' 
            - '/solr/*' 
      ListenerArn: !Ref SolrListener 
      Priority: 1 
 
# AWS Certificate Manager 
  LBCertificate: 
    Type: AWS::CertificateManager::Certificate 
    Properties:  
      DomainName: !Select [0, !Ref CertNames] 
      ValidationMethod: DNS 
      SubjectAlternativeNames: !If [CreateSAN, !Ref CertNames, !Ref "AWS::NoValue"] 
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT60M 
 
# Parameter Store Entries 
  sgrWSLBParam: 
    Type: "AWS::SSM::Parameter" 
    Properties:  
      Description:  !Sub "${Environment} Windows Web Load Balancers Security Group" 
      Name: !Sub "${Environment}-sgrWSLB" 
      Type: String 
      Value: !Ref sgrWSLB 
  sgrCSParam: 
    Type: "AWS::SSM::Parameter" 
    Properties:  
      Description:  !Sub "${Environment} - Windows Web Servers Security Group" 
      Name: !Sub "${Environment}-sgrCS" 
      Type: String 
      Value: !Ref sgrCS 
 