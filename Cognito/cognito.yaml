AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Cloudformation Template is used to create an Incognito Identity Pool for
  Kibana for the ElasticSearch Service Domain (can be modified and used for other
  services as well. This will be as complete as possible).
  Validation Parameters used -
   First Name
   Family (Last) Name
   Email Address
  You can always add more to the template if you need more constraints.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Cognito Resource Names"
        Parameters:
          - UserPoolName
          - ClientName
          - IdentityPoolName
      -
        Label:
          default: "User Account Attributes"
        Parameters:
          - UsernameAttributes
          - AutoVerifiedAttributes
      -
        Label:
          default: "Password Policy"
        Parameters:
          - MinimumLength
          - RequireLowercase
          - RequireNumbers
          - RequireSymbols
          - RequireUppercase
          - TemporaryPasswordValidityDays
      -
        Label:
          default: "User Creation Configuration"
        Parameters:
          - AllowAdminCreateUserOnly
          - AllowUnauthenticatedIdentities

    ParameterLabels:
      UserPoolName: # A string used to name the user pool
        default: "A unique name for the User Pool (3-128)"
      ClientName: # The client name for the user pool client you would like to create
        default: "A unique name for the User Pool Client (3-128)"
      IdentityPoolName: # The name of your Amazon Cognito identity pool
        default: "A unique name for the Identiy Pool (3-128)"
      MinimumLength: # The minimum length of the password policy that you have set. Cannot be less than 6
        default: "Password - Minimum Length (8-30)"
      RequireLowercase: # In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password
        default: "Password - Require Lowercase (TRUE/Fale)"
      RequireNumbers: # In the password policy that you have set, refers to whether you have required users to use at least one number in their password
        default: "Password - Require Numbers (TRUE/Fale)"
      RequireSymbols: # In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password
        default: "Password - Require Sumbols (TRUE/Fale)"
      RequireUppercase: # In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password
        default: "Password - Require UpperCase (TRUE/Fale)"
      TemporaryPasswordValidityDays: # In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator
        default: "Password - Number of days Temorary Password is valid (7-14 days)"
      AllowAdminCreateUserOnly: # Allows only admins to creat users in the User Pool (no self-signup if set to True)
        default: "Allow only Admins to create accounts (TRUE/False)"
      AllowUnauthenticatedIdentities: # Specifies whether the identity pool supports unauthenticated logins
        default: "Specifies whether the identity pool supports unauthenticated logins (True/FALSE)"
      UsernameAttributes: # This sets the username as either Email or Phone Number
        default: "Username Attribute - Email Address or Phone Number"
      AutoVerifiedAttributes: # The attributes to be auto-verified
        default: "Verification Method - Email Address or Phone Number (Requires SMS abilities which incurr additional costs)"

Parameters:
  UserPoolName:
    Type: String
    MinLength: 3
    MaxLength: 128
    AllowedPattern: ^\w+$
  ClientName:
    Type: String
    MinLength: 3
    MaxLength: 128
    AllowedPattern: ^\w+$
  IdentityPoolName:
    Type: String
    MinLength: 3
    MaxLength: 128
    AllowedPattern: ^\w+$
  MinimumLength:
    Type: Number
    Default: 12
    MinValue: 8
    MaxValue: 30
  RequireLowercase:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  RequireNumbers:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  RequireSymbols:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  RequireUppercase:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  TemporaryPasswordValidityDays:
    Type: Number
    Default: 7
    MinValue: 7
    MaxValue: 14
  AllowAdminCreateUserOnly:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  AllowUnauthenticatedIdentities:
    Type: String
    Default: False
    AllowedValues:
      - True
      - False
  UsernameAttributes:
    Type: String
    Default: email
    AllowedValues:
      - email
      - phone_number
  AutoVerifiedAttributes:
    Type: String
    Default: email
    AllowedValues:
      - email
      - phone_number

Resources:
  # Creates a user pool in cognito for your app to auth against
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Ref AllowAdminCreateUserOnly
      MfaConfiguration: "OFF"
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref MinimumLength
          RequireLowercase: !Ref RequireLowercase
          RequireNumbers: !Ref RequireNumbers
          RequireSymbols: !Ref RequireSymbols
          RequireUppercase: !Ref RequireUppercase
          TemporaryPasswordValidityDays: !Ref TemporaryPasswordValidityDays
      UsernameAttributes: !Ref UsernameAttributes
      AutoVerifiedAttributes: !Ref AutoVerifiedAttributes
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Ref ClientName
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: !Ref AllowUnauthenticatedIdentities
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  # ######################################################################### # 
  # The BELOW is REQUIRED - DO NOT EDIT unless you know what you are doing!   #
  # Create a role for unauthorized acces to AWS resources.                    #
  # Very limited access.                                                      #
  # ######################################################################### # 
  # Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  # ######################################################################### # 
  # The ABOVE is REQUIRED - DO NOT EDIT unless you know what you are doing!   #
  # ######################################################################### # 
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: "IdentityPool::Id"